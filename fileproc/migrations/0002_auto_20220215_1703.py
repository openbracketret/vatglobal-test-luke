# Generated by Django 4.0.2 on 2022-02-15 15:03

from django.db import migrations


import json
import pandas as pd

def preload_countries_and_currencies(apps, schema_editor):
    """
    This function is used during the migration in order to preload the countries and currency codes into the country model so that they can easily be accessed 
    once the system is running
    # NOTE:
        In order to save time I have not done the requirements needed for reverse migrations
    """

    # Load the country csv file and drop the unnecessary columns
    country_df = pd.read_csv("country_defaults/country.csv")
    country_df = country_df.drop(columns=[
        'Alpha-3 code',
        'Numeric code',
        'Latitude (average)',
        'Longitude (average)',
    ])

    country_df['Country'] = country_df['Country'].apply(
        lambda x: x.lower()
    )

    currency_df = pd.read_csv("country_defaults/currency.csv")
    currency_df = currency_df.drop(columns=[
        'WithdrawalDate',
        'MinorUnit',
        'NumericCode',
        'Currency'
    ])

    currency_df['Entity'] = currency_df['Entity'].apply(
        lambda x: x.lower()
    )
    # Rename the column in order for the merge to work accurately
    currency_df = currency_df.rename(columns={
        "Entity": "Country"
    })

    # Merge the DF and drop the duplicates
    country_df = country_df.merge(currency_df, on="Country")
    # NOTE: This is naive approach to save time, usually to solve the issue of having many different
    # currency codes for a single country you would have a seperate currency table that links
    # back to the country.
    country_df = country_df.drop_duplicates(subset=['Country'])

    # Rename columns to match database table field names
    country_df = country_df.rename(columns={
        "Country": "name",
        "Alpha-2 code": "alpha_code",
        "AlphabeticCode": "currency_code"
    })

    Country = apps.get_model('fileproc', 'Country')

    # NOTE: This is not the most effiecient way to do this but I could not figure out how 
    # to load a DB engine and execute SQL in a migration doing this
    json_list = json.loads(json.dumps(list(country_df.T.to_dict().values())))

    for item in json_list:
        Country.objects.get_or_create(**item)

    Country.objects.create(
        name="NONE",
        alpha_code="NONE",
        currency_code="NONE",
    )


class Migration(migrations.Migration):

    dependencies = [
        ('fileproc', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(preload_countries_and_currencies)
    ]
